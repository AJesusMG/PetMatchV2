// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model user {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String      @unique
  lastname     String?   
  isAdmin      Boolean     @default(false)
  email        String      @unique
  password     String
  phoneNumber  String?
  instagramUrl String?
  facebookUrl  String?
  photoUrl     String?
  community    community[]
  comments     comments[]
  reports      reports[]
  survey       survey?
}

model animals {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  weight_animal Float
  names         String
  age           Int
  size          sizes
  training      Boolean
  speciesId     String?  @db.ObjectId
  colorId       String[] @db.ObjectId
  temperamentId String[] @db.ObjectId
  maintenanceId String?  @db.ObjectId
  timeNeededId  String?  @db.ObjectId

  animalTypes  species?      @relation(fields: [speciesId], references: [id])
  color        color[]       @relation(fields: [colorId], references: [id])
  temperaments temperament[] @relation(fields: [temperamentId], references: [id])
  maintenance  maintenance?  @relation(fields: [maintenanceId], references: [id])
  posts        posts?
  timeNeeded   timeNeeded?   @relation(fields: [timeNeededId], references: [id])
}

enum sizes {
  small
  medium
  big
}

model species {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  weight_species Float
  specie         String

  animals animals[]
  breeds  breeds[]
}

model breeds {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  weight_breed Float
  breed        String
  speciesId    String? @db.ObjectId
  habitadId    String? @db.ObjectId

  species species? @relation(fields: [speciesId], references: [id])
  habitad habitad? @relation(fields: [habitadId], references: [id])
}

model habitad {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  weight_habitad Float
  spaceid        String?  @db.ObjectId
  weathersIds    String[] @db.ObjectId

  spaces   space?    @relation(fields: [spaceid], references: [id])
  breeds   breeds[]
  weathers weather[] @relation(fields: [weathersIds], references: [id])
}

model space {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  weight_space Float
  space        spaces

  habitads habitad[]
}

enum spaces {
  small
  medium
  big
}

model weather {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  weight_weather Float
  weather        String
  habitadsIds    String[] @db.ObjectId

  habitads habitad[] @relation(fields: [habitadsIds], references: [id])
}

model color {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  weight_color Float
  color        String
  animalsIds   String[] @db.ObjectId

  animals animals[] @relation(fields: [animalsIds], references: [id])
}

// Checar si en vez de hacer una relacion de muchos a muchos, hacer un atributo enum de colores

model temperament {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  weight_temperament Float
  temperament        String
  animalId           String[] @db.ObjectId

  animals animals[] @relation(fields: [animalId], references: [id])
}

model community {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  createdAt DateTime
  userId    String?  @db.ObjectId

  user     user?      @relation(fields: [userId], references: [id])
  comments comments[]
}

model comments {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  text        String
  createdAt   DateTime
  userId      String?  @db.ObjectId
  communityId String?  @db.ObjectId

  user      user?      @relation(fields: [userId], references: [id])
  community community? @relation(fields: [communityId], references: [id])
}

model reports {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId
  postId String? @db.ObjectId

  user user?  @relation(fields: [userId], references: [id])
  post posts? @relation(fields: [postId], references: [id])
}

model posts {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  adopted     Boolean @default(false)
  description String
  active      Boolean
  craetedAt   Boolean
  urlImagen   String?
  animalId    String? @unique @db.ObjectId
  userId      String? @db.ObjectId

  animal       animals?       @relation(fields: [animalId], references: [id])
  reports      reports[]
  deletedPosts deletedPosts[]
}

model deletedPosts {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  postId  String? @db.ObjectId
  adminId String? @db.ObjectId

  posts posts?  @relation(fields: [postId], references: [id])
  admin admins? @relation(fields: [adminId], references: [id])
}

model admins {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  username     String         @unique
  password     String
  deletedPosts deletedPosts[]
}

model survey {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  R_age         String
  R_size        String
  R_species     String
  R_breed       String
  R_space       String
  R_weather     String
  R_color       String
  R_temperament String
  R_cost        String
  R_time        String
  R_training    String

  userId String? @unique @db.ObjectId
  user   user?   @relation(fields: [userId], references: [id])
}

model maintenance {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  maintenance String
  animals     animals[]
}

model timeNeeded {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  timeNeeded String
  animals    animals[]
}

// model User {
//   id           Int             @id @default(autoincrement())
//   firstName    String
//   lastName     String
//   email        String          @unique
//   password     String
//   phone        String
//   instagramUrl String
//   facebookUrl  String
//   imageUrl     String
//   posts        Post[]
//   communities  Community[]
//   comments     Comment[]
//   reports      Report[]
// }

// model Post {
//   id            Int             @id @default(autoincrement())
//   adopted       Boolean
//   description   String
//   active        Boolean
//   createdAt     DateTime
//   animalId      Int
//   userId        Int
//   imageUrl      String
//   user          User            @relation(fields: [userId], references: [id])
//   animal        Animal          @relation(fields: [animalId], references: [id])
//   reports       Report[]
//   deletedPosts  DeletedPost[]
// }

// model Community {
//   id            Int             @id @default(autoincrement())
//   text          String
//   createdAt     DateTime
//   userId        Int
//   user          User            @relation(fields: [userId], references: [id])
//   comments      Comment[]
// }

// model Comment {
//   id            Int             @id @default(autoincrement())
//   text          String
//   createdAt     DateTime
//   communityId   Int
//   userId        Int
//   community     Community       @relation(fields: [communityId], references: [id])
//   user          User            @relation(fields: [userId], references: [id])
// }

// model Report {
//   id            Int             @id @default(autoincrement())
//   userId        Int
//   postId        Int
//   user          User            @relation(fields: [userId], references: [id])
//   post          Post            @relation(fields: [postId], references: [id])
// }

// model Animal {
//   id              Int              @id @default(autoincrement())
//   name            String
//   age             Int
//   size            Float
//   origin          String
//   exotic          Boolean
//   typeId          Int
//   colorId         Int
//   patternId       Int
//   type            AnimalType       @relation(fields: [typeId], references: [id])
//   color           Color            @relation(fields: [colorId], references: [id])
//   pattern         Pattern          @relation(fields: [patternId], references: [id])
//   personalities   AnimalPersonality[]
//   tendencies      AnimalTendency[]
// }

// model AnimalType {
//   id             Int              @id @default(autoincrement())
//   type           String
//   animals        Animal[]
//   breeds         Breed[]
// }

// model Breed {
//   id             Int              @id @default(autoincrement())
//   breed          String
//   typeId         Int
//   habitatId      Int
//   type           AnimalType       @relation(fields: [typeId], references: [id])
//   habitat        Habitat          @relation(fields: [habitatId], references: [id])
// }

// model Habitat {
//   id             Int              @id @default(autoincrement())
//   habitat        String
//   breeds         Breed[]
// }

// model Tendency {
//   id             Int              @id @default(autoincrement())
//   tendency       String
//   animalTendencies AnimalTendency[]
// }

// model Personality {
//   id             Int              @id @default(autoincrement())
//   personality    String
//   animalPersonalities AnimalPersonality[]
// }

// model Pattern {
//   id             Int              @id @default(autoincrement())
//   pattern        String
//   animals        Animal[]
// }

// model AnimalPersonality {
//   personalityId  Int
//   animalId       Int
//   personality    Personality       @relation(fields: [personalityId], references: [id])
//   animal         Animal            @relation(fields: [animalId], references: [id])
//   @@id([personalityId, animalId])
// }

// model AnimalTendency {
//   tendencyId     Int
//   animalId       Int
//   tendency       Tendency          @relation(fields: [tendencyId], references: [id])
//   animal         Animal            @relation(fields: [animalId], references: [id])
//   @@id([tendencyId, animalId])
// }

// model Color {
//   id             Int              @id @default(autoincrement())
//   color          String
//   animals        Animal[]
// }

// model Admin {
//   id             Int              @id @default(autoincrement())
//   username       String
//   password       String
//   deletedPosts   DeletedPost[]
// }

// model DeletedPost {
//   id             Int              @id @default(autoincrement())
//   adminId        Int
//   postId         Int
//   admin          Admin            @relation(fields: [adminId], references: [id])
//   post           Post             @relation(fields: [postId], references: [id])
// }
